{"version":3,"sources":["components/card.js","components/card-list.js","components/button.js","components/button-list.js","serviceWorker.js","constants/index.js","index.js"],"names":["Card","props","react_default","a","createElement","className","key","id","title","href","target","rel","CardList","posts","this","map","item","card","url","Component","ButtonItem","_ref","button","onButtonSelect","onClick","ButtonList","buttonItems","buttons","components_button","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","DEFAULT_QUERY","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","changeTerm","newTerm","setState","selectedButton","showResults","loading","bind","assertThisInitialized","searchTerm","_this2","concat","axios","get","res","data","children","obj","response","status","headers","request","message","_this$state","button_list","card_list","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.62072b4a.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n   // console.log(props);\n    return (\n        <div className=\"card\" key={props.id}>\n            <h2>{props.title}</h2>\n           <p> <a href={props.href} target=\"_blank\" rel=\"noopener noreferrer\">{props.href}</a></p>\n        </div>\n\n    )\n}\n\nexport default Card;","import React, {Component} from 'react';\nimport Card from './card';\n//import SearchLine from './search-line';\n\nclass CardList extends Component{\n    render(){\n    const {posts} = this.props;\n        return (\n            <div className=\"card-list container\">\n                   \n                {posts.map(item =>\n                    <Card  \n                        key={item.id} \n                        href={item.url}\n                        title = {item.title}\n                    />\n                \n                )}\n            </div>\n        );\n    }\n}\nexport default CardList;\n\n//<div key={item.objectID} className=\"card\">\n//<Card  />\n//<span>\n //   <a href={item.url}>{item.title}</a>\n//</span>\n//</div>","import React from 'react';\n\nconst  ButtonItem =({button, onButtonSelect}) => {\n    //this will deal with a onClick on a button event\n    //then we will need to save the Selected Button\n    /*function handleClick(e, selection){\n        e.preventDefault();\n        console.log('button got clicked! ', selection);\n        //this.setState(something here);\n    }*/\n    \n   return (\n\n    <li><button onClick={( ) => onButtonSelect(button)}> {button} </button></li>\n    )\n}\n//    <li><button onClick={(e) => handleClick(e, {button})}> {button} </button></li>\nexport default ButtonItem;","import React from 'react';\nimport ButtonItem from './button';\n//import Button from './button'\n//make a JSON list of data - keep in separate file or just here?\n//possible searches: drupal, react, javascript, php, wordpress, python, java\n\n\n    const ButtonList =(props)=>{\n    const buttonItems = props.buttons.map((button) => {\n        return (\n        <ButtonItem\n        onButtonSelect = {props.onButtonSelect}\n        key = {button}\n        button = {button} />\n        )\n    });\n\n        return (\n            <ul className=\"button-list\">\n            {/** how do you print a list - look in video list**/ }\n               {buttonItems}\n                \n            </ul>\n        );\n    }\nexport default ButtonList;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nexport const PATH_BASE = 'https://www.reddit.com/r/';\nexport const DEFAULT_QUERY = 'reactjs';\n//export const DEFAULT_SUBREDDIT = 'javascript';\n//export const END_VALUES = '&restrict_sr=1&sort=new';\n\n//PATH_BASE,\n // PATH_SEARCH,\n // PARAM_SEARCH,\n // DEFAULT_SUBREDDIT,\n // END_VALUES,\n\n //const buttons = [\"javascript\",\"drupal\",\"php\", \"reactjs\"];\n\n//export const PATH_BASE = 'https://hn.algolia.com/api/v1';\n//export const PATH_SEARCH = '/search';\n//export const PARAM_SEARCH = 'query=';\n\n//https://www.reddit.com/r/javascript/search?q=reactjs&restrict_sr=1&sort=new\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport CardList from './components/card-list';\nimport ButtonList from './components/button-list';\n//SearchLine was good for vanilla JavaScript of reddit api\n//import SearchLine from './components/search-line';\nimport * as serviceWorker from './serviceWorker';\nimport {\n  DEFAULT_QUERY,\n  PATH_BASE,\n} from './constants/';\n\nconst buttons = [\"javascript\",\"drupal\",\"php\", \"reactjs\", \"laravel\", \"oop\", \"books\"];\n\nclass App extends Component {\n    constructor(props){\n        super(props);\n\n      this.state = {\n          buttons: [],\n          selectedButton: DEFAULT_QUERY,\n          posts: [],\n          loading: true,\n          error: null\n      };\n     // this.setSearchTopStories = this.setSearchTopStories.bind(this);\n      this.showResults = this.showResults.bind(this);\n    }\n\n   /* setSearchTopStories(result){\n      //console.log(result);\n      this.setState({result});\n    }*/\n\n    changeTerm = (newTerm) => {\n      this.setState({\n          selectedButton: newTerm\n      } );\n      this.showResults(newTerm);\n      //do I need this?\n     // e.preventDefault();\n    }\n\n    showResults (searchTerm){\n\n     //const url = `${PATH_BASE}${DEFAULT_SUBREDDIT}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}${END_VALUES}`;\n     const url = `${PATH_BASE}${searchTerm}.json`;\n     console.log(url);\n  \n     // axios(`${PATH_BASE}${DEFAULT_SUBREDDIT}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}${END_VALUES}`)\n        axios.get(`${PATH_BASE}${searchTerm}.json`)\n        .then(res => {\n          // Transform the raw data by extracting the nested posts\n          const posts = res.data.data.children.map(obj => obj.data);\n  \n          // Update state to trigger a re-render.\n          // Clear any errors, and turn off the loading indiciator.\n          this.setState({\n            posts,\n            loading: false,\n            error: null\n          });\n        })\n        .catch(error => {\n          // Something went wrong. Save the error in state and re-render.\n          console.log('nopes');\n          // Error\n        if (error.response) {\n          // The request was made and the server responded with a status code\n          // that falls out of the range of 2xx\n          // console.log(error.response.data);\n           console.log(error.response.status);\n           console.log(error.response.headers);\n      } else if (error.request) {\n          // The request was made but no response was received\n          // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n          // http.ClientRequest in node.js\n          console.log(error.request);\n      } else {\n          // Something happened in setting up the request that triggered an Error\n          console.log('Error', error.message);\n      }\n      console.log(error.config);\n         /* this.setState({\n            loading: false,\n            error: err\n          });*/\n        });\n    }\n  \n    componentDidMount() {\n        const {selectedButton} = this.state;\n        this.showResults(selectedButton);\n    }\n\nrender() {\n  const {selectedButton, posts, loading} = this.state;\n  //console.log({posts});\n      return (\n        <div>\n        <ButtonList \n        buttons={buttons} \n       // changeTerm={this.changeTerm.bind(this)}  \n        //onButtonSelect = {selectedButton => this.setState({selectedButton})}\n        onButtonSelect = {this.changeTerm.bind(this)} \n        />\n        <br />\n        <div>Reddit links on {selectedButton}:</div>\n       <hr />\n       {loading?\n        <div>Loading...</div>\n        :\n        <CardList \n        posts={posts}\n        />\n       }\n        </div>\n       \n      );\n    }\n\n  }\n  \n  ReactDOM.render(<App />, document.getElementById('root'));\n\n // <SearchLine \n //selectedButton = {selectedButton}\n ///> \n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}